"""
Django settings for polls project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
from decouple import config
from pathlib import Path
# we don't normally have to change this line of code. 
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# manage and store a secret key. used for pwd hashing, generating sessions. You can replace 
# this by creating a new secret key. you can google a django secret key generator. 
# DONT PUSH THIS UP TO GITHUB! IT'S A SECRET KEY!
# SECURITY WARNING: keep the secret key used in production secret!
# # REMOVED # #
SECRET_KEY = config("SECRET_KEY")

# turn this off in production. for now we leave it as true. We will learn later on this. 
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# how to configure CORS (cross origin resource sharing). it's a security feature that prevents resource sharing. 
# we can whitelist any domains. takes string data. we added a "*" to allow all domains for now.  
ALLOWED_HOSTS = ["*"]


# pieces of functionality installed in your projcet. exist in binary. kind of like your packageLock.json. 
# you don't physically change this, as it will automatically update itself when you install packages. 
# Application definition
INSTALLED_APPS = [
    'pollapp.apps.PollappConfig',
    'django.contrib.admin', # manages django project...?
    'django.contrib.auth', # manages pasword hashing
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# MIDDLEWARE! you don't have to add anything. comes pre-installed! 
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware', #this is middleware to detect if a user is using common passwords
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware', # checks credentials for login users. 
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware', #what is clickjacking??
]
# helps us configure all of our urls for the entire website. 
ROOT_URLCONF = 'polls.urls'
# config for built in template engine. DTL = django template language. we don't have to touch this. 
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], # DIRS is a list of filesystem directories to check when loading django templates. it's a search path. 
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'polls.wsgi.application'

# our config var for our django DB. it's a filetype DB called SQLlite. 
# you don't have to touch this, as it's created when you create a project. 
# it stores your data in binary. it's useful, but you don't use this in production. 
# we keep it as is for now, but we can change it later when we hook up our SQL DB. 
# we will eventually delete this and replace this with our DB configs. 
# this is called a lazily loaded module. 
# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'polls',
    }
}

# click the link for more info if you want! 
# basically it's middleware for pwd auth. 
# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# you can change your time zone here: currently set to UTC. 
# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'MST'

USE_I18N = True

USE_TZ = True

# css is already linked up for you. 
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# how many jobs are open for python/django devs? i know I can google it, but I'm curious to ask you. 
# run the server in terminal: python3 manage.py runserver
# google which companies that are looking for python devs. 
# it's a niche language though, so google it. 

# to switch away from sqlLite, we need to make the database and install the driver. 

# ASK PAUL ABOUT CONTRACT WORK AND HOW HE LIKED IT. 